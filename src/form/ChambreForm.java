/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package form;
import entities.Categorie;
import entities.Chambre;
import service.ChamberService;
import service.CategorieService;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.List;
/**
 *
 * @author Dark
 */
public class ChambreForm extends javax.swing.JInternalFrame {
private ChamberService chamberService;
    private CategorieService categorieService;
    private DefaultTableModel model;
    public static int id;
    /**
     * Creates new form ChambreForm
     */
    public ChambreForm() {
        initComponents();
        chamberService = new ChamberService();
        categorieService = new CategorieService();
        model = (DefaultTableModel) ListChamber.getModel();
        chargerCategories(); // Charger les catégories dans le JComboBox
        load(); // Charger les données au démarrage
    }
      private void chargerCategories() {
        List<Categorie> categories = categorieService.findAll();
        for (Categorie categorie : categories) {
            jComboBoxCategorie.addItem(categorie.getLibelle());
        }
    }
     public void load() {
        model.setRowCount(0); // Vider la table
        for (Chambre chambre : chamberService.findAll()) {
            model.addRow(new Object[]{
                chambre.getId(),
                chambre.getType(),
                chambre.isAvailable() ? "Oui" : "Non",
                chambre.getNumber(),
                chambre.getDescription(),
                categorieService.findById(chambre.getCategorieId()).getLibelle() // Libellé de la catégorie
            });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        chambertype = new javax.swing.JTextField();
        chamberNumber = new javax.swing.JTextField();
        ChamberDescription = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jComboBoxAvailable = new javax.swing.JComboBox<>();
        jComboBoxCategorie = new javax.swing.JComboBox<>();
        jButton4 = new javax.swing.JButton();
        RechercheBtnChamber = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        ChamberRechercher = new javax.swing.JTextField();
        AnuulerBtnRecherch = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListChamber = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(102, 102, 0));
        setTitle("Gestion Chambre ");
        setFocusable(false);

        jPanel1.setBackground(new java.awt.Color(255, 204, 153));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Gestion Chamber ");

        jLabel2.setText("Type");

        jLabel3.setText("Available");

        jLabel4.setText("Number");

        jLabel5.setText("Description");

        jLabel6.setText("CategorieId");

        chambertype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chambertypeActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(158, 140, 35));
        jButton1.setText("Ajouter");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(158, 140, 35));
        jButton2.setText("Modifier");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(158, 140, 35));
        jButton3.setText("Supprimer");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jComboBoxAvailable.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Oui", "Non" }));
        jComboBoxAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxAvailableActionPerformed(evt);
            }
        });

        jComboBoxCategorie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCategorieActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(158, 140, 35));
        jButton4.setText("Vider");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        RechercheBtnChamber.setBackground(new java.awt.Color(158, 140, 35));
        RechercheBtnChamber.setText("Rechercher ");
        RechercheBtnChamber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RechercheBtnChamberActionPerformed(evt);
            }
        });

        jLabel8.setText("Rechercher : ");

        ChamberRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChamberRechercherActionPerformed(evt);
            }
        });

        AnuulerBtnRecherch.setBackground(new java.awt.Color(158, 140, 35));
        AnuulerBtnRecherch.setText("Annuler ");
        AnuulerBtnRecherch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnuulerBtnRecherchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(jLabel2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(jLabel3))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(jLabel4))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel8)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(chambertype)
                            .addComponent(ChamberDescription)
                            .addComponent(chamberNumber)
                            .addComponent(jComboBoxAvailable, 0, 929, Short.MAX_VALUE)
                            .addComponent(jComboBoxCategorie, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(74, 74, 74)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ChamberRechercher, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RechercheBtnChamber)
                        .addGap(31, 31, 31)
                        .addComponent(AnuulerBtnRecherch)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(chambertype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBoxAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(chamberNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(ChamberDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxCategorie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ChamberRechercher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RechercheBtnChamber)
                    .addComponent(AnuulerBtnRecherch)
                    .addComponent(jLabel8))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(151, 69, 28));

        ListChamber.setBackground(new java.awt.Color(231, 215, 150));
        ListChamber.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "id", "type", "available", "number", "description", "categorie"
            }
        ));
        ListChamber.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListChamberMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ListChamber);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Liste des chmabers ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1234, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chambertypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chambertypeActionPerformed
        // TODO add your handling code here:
        // JOptionPane.showMessageDialog(this, "Le type de chambre a été modifié.");
    }//GEN-LAST:event_chambertypeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         String type = chambertype.getText();
        boolean available = jComboBoxAvailable.getSelectedItem().equals("Oui");
        int number = Integer.parseInt(chamberNumber.getText());
        String description = ChamberDescription.getText();
        String categorieLibelle = (String) jComboBoxCategorie.getSelectedItem();
        int categorieId = categorieService.findIdByLibelle(categorieLibelle);

        Chambre chambre = new Chambre(type, available, number, description, categorieId);
        if (chamberService.create(chambre)) {
            JOptionPane.showMessageDialog(this, "Chambre ajoutée avec succès");
            load(); // Recharger les données
        } else {
            JOptionPane.showMessageDialog(this, "Erreur lors de l'ajout de la chambre");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ListChamberMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListChamberMouseClicked
        int row = ListChamber.getSelectedRow();
    if (row >= 0) {
        id = Integer.parseInt(model.getValueAt(row, 0).toString());
        chambertype.setText(model.getValueAt(row, 1).toString());
        jComboBoxAvailable.setSelectedItem(model.getValueAt(row, 2).toString()); // "Oui" ou "Non"
        chamberNumber.setText(model.getValueAt(row, 3).toString());
        ChamberDescription.setText(model.getValueAt(row, 4).toString());
        jComboBoxCategorie.setSelectedItem(model.getValueAt(row, 5).toString()); // Libellé de la catégorie
    }

    // Commenter ou supprimer cette ligne
    // JOptionPane.showMessageDialog(this, "Ligne sélectionnée : " + row);
    }//GEN-LAST:event_ListChamberMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String type = chambertype.getText();
        boolean available = jComboBoxAvailable.getSelectedItem().equals("Oui");
        int number = Integer.parseInt(chamberNumber.getText());
        String description = ChamberDescription.getText();
        String categorieLibelle = (String) jComboBoxCategorie.getSelectedItem();
        int categorieId = categorieService.findIdByLibelle(categorieLibelle);

        Chambre chambre = new Chambre(id, type, available, number, description, categorieId);
        if (chamberService.update(chambre)) {
            JOptionPane.showMessageDialog(this, "Chambre modifiée avec succès");
            load(); // Recharger les données
        } else {
            JOptionPane.showMessageDialog(this, "Erreur lors de la modification de la chambre");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
          int reponse = JOptionPane.showConfirmDialog(this, "Voulez-vous vraiment supprimer cette chambre ?");
        if (reponse == JOptionPane.YES_OPTION) {
            Chambre chambre = new Chambre(id);
            if (chamberService.delete(chambre)) {
                JOptionPane.showMessageDialog(this, "Chambre supprimée avec succès");
                load(); // Recharger les données
            } else {
                JOptionPane.showMessageDialog(this, "Erreur lors de la suppression de la chambre");
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jComboBoxAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxAvailableActionPerformed
               // Exemple : Afficher un message lorsque la sélection dans le JComboBox est modifiée
   // String selectedItem = (String) jComboBoxAvailable.getSelectedItem();
    //JOptionPane.showMessageDialog(this, "Vous avez sélectionné : " + selectedItem);
    }//GEN-LAST:event_jComboBoxAvailableActionPerformed

    private void jComboBoxCategorieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCategorieActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxCategorieActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       chambertype.setText(""); // Vider le champ "Type"
    chamberNumber.setText(""); // Vider le champ "Number"
    ChamberDescription.setText(""); // Vider le champ "Description"

    // Réinitialiser les JComboBox
    jComboBoxAvailable.setSelectedIndex(0); // Réinitialiser "Available" à la première option
    jComboBoxCategorie.setSelectedIndex(0);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void RechercheBtnChamberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RechercheBtnChamberActionPerformed
       // Récupérer l'ID saisi dans le champ de recherche
    String idText = ChamberRechercher.getText().trim();

    // Vérifier si le champ est vide
    if (idText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Veuillez entrer un ID pour rechercher une chambre.", "Erreur", JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        // Convertir l'ID en entier
        int id = Integer.parseInt(idText);

        // Rechercher la chambre par ID
        Chambre chambre = chamberService.findById(id);

        // Vérifier si la chambre existe
        if (chambre == null) {
            JOptionPane.showMessageDialog(this, "Aucune chambre trouvée avec l'ID : " + id, "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Afficher les détails de la chambre dans le tableau
        model.setRowCount(0); // Vider le tableau
        model.addRow(new Object[]{
            chambre.getId(),
            chambre.getType(),
            chambre.isAvailable() ? "Oui" : "Non",
            chambre.getNumber(),
            chambre.getDescription(),
            categorieService.findById(chambre.getCategorieId()).getLibelle() // Libellé de la catégorie
        });

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "L'ID doit être un nombre entier.", "Erreur", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Erreur lors de la recherche de la chambre : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_RechercheBtnChamberActionPerformed

    private void AnuulerBtnRecherchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnuulerBtnRecherchActionPerformed
       // Réinitialiser le champ de recherche
    ChamberRechercher.setText("");

    // Recharger toutes les chambres dans le tableau
    load();
    }//GEN-LAST:event_AnuulerBtnRecherchActionPerformed

    private void ChamberRechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChamberRechercherActionPerformed
        // Appeler la méthode de recherche lorsque l'utilisateur appuie sur "Entrée"
    RechercheBtnChamberActionPerformed(evt);
    }//GEN-LAST:event_ChamberRechercherActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AnuulerBtnRecherch;
    private javax.swing.JTextField ChamberDescription;
    private javax.swing.JTextField ChamberRechercher;
    private javax.swing.JTable ListChamber;
    private javax.swing.JButton RechercheBtnChamber;
    private javax.swing.JTextField chamberNumber;
    private javax.swing.JTextField chambertype;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBoxAvailable;
    private javax.swing.JComboBox<String> jComboBoxCategorie;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
